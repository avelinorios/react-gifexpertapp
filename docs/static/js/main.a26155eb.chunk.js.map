{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,gDACmCC,UAAUH,GAD7C,+DAEII,MAAOF,GAFX,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECHwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAY,WACRxB,EAASC,GACJwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAACpB,IAIGqB,EDf0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACI,qCACI,mCAAOpB,EAAP,OAEMoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,6CAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eACKA,GADcA,EAAIC,aEhBtCgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,YAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAIA,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BACMS,EAAWe,KAAK,SAACT,GAAD,OACb,cAAC,EAAD,CACGA,SAAWA,GACLA,Y,MChB9B4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a26155eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue, ...categories]); \n            setInputValue('');\n        }\n    }\n\n    return (\n       \n            <form onSubmit={ handleSubmit }>\n                <input \n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputChange }\n                />\n\n            </form>\n       \n    )\n\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=zpSwwAHDMoEDBRVdHRxXBzHsMn5t40tN`;\n    const response = await fetch( url );\n    const {data} = await response.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }></img>\n            <p> { title } </p>\n        </div>\n    )\n}\n","import { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\n   \n    const { data:images, loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3> { category } </h3>\n\n                { loading && <p className=\"animate__animated animate__fadeIn\">Loading</p> }\n\n                <div className=\"card-grid animate__animated animate__flash\">\n            \n                    {\n                        images.map( img => (\n                            <GifGridItem key={ img.id }\n                            { ...img }\n                            />\n                            ))\n                        }\n                \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(  () => {\n        getGifs( category )\n            .then( imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n            })\n    }, [category]);\n\n \n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Ironman']);\n\n\n\n    return (\n        <>\n            \n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = { setCategories }></AddCategory>\n            <hr />\n\n            <ol>\n                { categories.map( (category) => \n                     <GifGrid \n                        category={ category }\n                        key={ category }\n                    />\n                 ) }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n// Gif Expert App\n"],"sourceRoot":""}